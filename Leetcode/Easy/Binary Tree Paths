/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<String> ans;
    StringBuilder sb;
    public void helper(TreeNode root){
        if(root==null) return;
        if(root.left==null && root.right==null){
            String temp=Integer.toString(root.val);
            sb.append(temp);
            ans.add(sb.toString());
            int n=sb.length();
            sb.delete(n-temp.length(),n);
        }

        String temp=Integer.toString(root.val);
        sb.append(temp);
        sb.append("->");
        helper(root.left);
        helper(root.right);
        int n=sb.length();
        sb.delete(n-temp.length(),n);
        sb.deleteCharAt(sb.length()-1);
        sb.deleteCharAt(sb.length()-1);

        
    }
    public List<String> binaryTreePaths(TreeNode root) {
        ans=new ArrayList<>();
        sb=new StringBuilder();
        helper(root);
        return ans;
    }
}
